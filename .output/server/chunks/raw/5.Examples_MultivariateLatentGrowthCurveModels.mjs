import { b as base64ToUint8Array } from '../virtual/_raw-helpers.mjs';

// ROLLUP_NO_REPLACE 
 const _5_Examples_MultivariateLatentGrowthCurveModels = base64ToUint8Array("");

export { _5_Examples_MultivariateLatentGrowthCurveModels as default };
//# sourceMappingURL=5.Examples_MultivariateLatentGrowthCurveModels.mjs.map
